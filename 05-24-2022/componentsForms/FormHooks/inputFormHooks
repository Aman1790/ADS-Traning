import { useState,useReducer } from 'react';
const initialInput={
    value: '',
        isTouched:false
}

const inputStateReducer= (state,action) =>{
    if(action.type==='Input'){
return{ value:action.value, isTouched: state.isTouched}
    } 
    if(action.type==='Blur'){
        return{ value:state.value, isTouched: true}
    }
    if(action.type==='Reset'){
        return{ value:'', isTouched: false}
    }
    
    return inputStateReducer;
}
const useInput = (validateValue) => {
 const [inputState, dispatch]=useReducer(inputStateReducer,initialInput)



//   const [enteredValue, setEnteredValue] = useState('');
//   const [isTouched, setIsTouched] = useState(false);


  const valueIsValid = validateValue(inputState.value);
  const hasError = !valueIsValid && inputState.isTouched;

  const valueChangeHandler = (event) => {
      dispatch({type:'Input', value:event.target.value});
    // setEnteredValue(event.target.value);
  };

  const inputBlurHandler = (event) => {
    dispatch({type:'Blur'});
    // setIsTouched(true);
  };

  const reset = () => {
    dispatch({type:'Reset'})
  };

  return {
    value: inputState.value,
    isValid: valueIsValid,
    hasError,
    valueChangeHandler,
    inputBlurHandler,
    reset
  };
};

export default useInput;